/*******************************************************************
Copyright(c) 2016, Harry He
All rights reserved.

Distributed under the BSD license.
(See accompanying file LICENSE.txt at
https://github.com/zhedahht/CodingInterviewChinese2/blob/master/LICENSE.txt)
*******************************************************************/

//==================================================================
// 《剑指Offer——名企面试官精讲典型编程题》代码
// 作者：何海涛
//==================================================================

// 面试题20：表示数值的字符串
// 题目：请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，
// 字符串“+100”、“5e2”、“-123”、“3.1416”及“-1E-16”都表示数值，但“12e”、
// “1a3.14”、“1.2.3”、“+-5”及“12e+5.4”都不是

////字符串遵循的模式 A[.[B]][e|EC]  或 .[B][e|EC]
///A,B,C三个部分
//A:数值的整数部分。可以有正负数
//B:紧跟着小数点为数值的小数部分。只能是无符号整数
//C:紧跟着'e'或者'E'为数值的指数部分

#include <iostream>
using namespace std;

bool scanUnsignedInteger(const char** str);
bool scanInteger(const char** str);


bool isNumeric(const char* str)
{
	if (nullptr == str)
	{
		return false;
	}
	bool numeric = scanInteger(&str);

	///如果出现'.'接下来是数字的小数部分
	if (*str == '.')
	{
		++str;

		////下面一行代码用 || 的原因
		//1.小数可以没有整数部分，例如： .123 等于 0.123
		//2.小数点后面可以没有数字,例如 233. 等于 233.0
		//3.当然小数点前面和后面可以有数字，例如 233.666
		numeric = scanUnsignedInteger(&str) || numeric;
	}

	///如果出现'e'或者'E'，接下来跟着的是数字的指数部分
	if (*str == 'e' || *str == 'E')
	{
		++str;

		///下面一行代码用&&的原因
		//1.当e或者E前面没有数字时，整个字符串不能表示数字，例如 .e1、e1
		//2.当e或者E后面没有数字时，整个字符串不能表示数字，例如12e、12e+5.4
		numeric = numeric && scanInteger(&str);
	}

	return numeric && *str == '\0';
}

bool scanUnsignedInteger(const char** str)
{
	const char* before = *str;
	while (**str != '\0' && **str >= '0' && **str <= '9')
	{
		++(*str);
	}

	//当str中存在若干0-9的数字时，返回true
	return *str > before;
}


//整数的格式可以用 [+|-]B 表示，其中B为无符号整数
bool scanInteger(const char** str)
{
	if (**str == '+' || **str == '-')
	{
		++(*str);
	}

	return scanUnsignedInteger(str);
}


int main(int argc, char* argv[])
{
	


	cout << endl;
	system("pause");
	return 0;
}


